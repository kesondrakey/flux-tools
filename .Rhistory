Title       = "Interactive QA/QC for AmeriFlux Data",
Version     = "0.2.0",
'Authors@R'   = 'person("Kesondra", "Key", email = "keyke@iu.edu", role = c("aut", "cre"))',
Description    = paste(
"Fluxtools provides a Shiny-based interactive QA/QC tool for eddy covariance",
"flux tower data processing. It generates data-point removal code via",
"user-directed selection directly from a scatterplot, with the option to",
"export a cleaned csv with removed points set to NA along with an R script",
"for removal code. Reference: Key (2025) <DOI: 10.5281/zenodo.15597159>",
sep = " "
),
License        = "GPL-3", #Since I use Shiny
URL            = c(
"https://github.com/kesondrakey/fluxtools",
"https://doi.org/10.5281/zenodo.15597159"
),
BugReports     = "https://github.com/kesondrakey/fluxtools/issues",
Encoding       = "UTF-8",
LazyData       = "true",
Imports        = "shiny, dplyr, plotly",
Suggests       = "knitr, rmarkdown",
VignetteBuilder = "knitr",
BuildVignettes = "FALSE"
))
# 2) Build a source tarball but keep prebuilt vignettes:
tarball <- devtools::build(vignettes = FALSE)
devtools::check_built(tarball)
# If DESCRIPTION does not yet exist, create one:
use_description(fields = list(
Package     = "fluxtools",
Type        = "Package",
Title       = "Interactive QA/QC for AmeriFlux Data",
Version     = "0.2.0",
'Authors@R'   = 'person("Kesondra", "Key", email = "keyke@iu.edu", role = c("aut", "cre"))',
Description    = paste(
"Fluxtools provides a Shiny-based interactive QA/QC tool for",
"eddy-covariance flux-tower data processing.",
"It generates data-point removal code via user-directed selection from a",
"scatterplot, and can export a cleaned CSV with removed points set to NA",
"plus an R script for reproducibility.",
"Reference: Key (2025) <DOI: 10.5281/zenodo.15597159>",
sep = " "
),
License        = "GPL-3", #Since I use Shiny
URL            = c(
"https://github.com/kesondrakey/fluxtools",
"https://doi.org/10.5281/zenodo.15597159"
),
BugReports     = "https://github.com/kesondrakey/fluxtools/issues",
Encoding       = "UTF-8",
LazyData       = "true",
Imports        = "shiny, dplyr, plotly",
Suggests       = "knitr, rmarkdown",
VignetteBuilder = "knitr",
BuildVignettes = "FALSE"
))
# If DESCRIPTION does not yet exist, create one:
use_description(fields = list(
Package     = "fluxtools",
Type        = "Package",
Title       = "Interactive QA/QC for AmeriFlux Data",
Version     = "0.2.0",
'Authors@R'   = 'person("Kesondra", "Key", email = "keyke@iu.edu", role = c("aut", "cre"))',
Description    = paste(
"Fluxtools provides a Shiny-based interactive QA/QC tool for",
"eddy-covariance flux-tower data processing.",
"It generates data-point removal code via user-directed selection from a",
"scatterplot, and can export a cleaned CSV with removed points set to NA",
"plus an R script for reproducibility.",
"Reference: Key (2025) <DOI: 10.5281/zenodo.15597159>.",
sep = " "
),
License        = "GPL-3", #Since I use Shiny
URL            = c(
"https://github.com/kesondrakey/fluxtools",
"https://doi.org/10.5281/zenodo.15597159"
),
BugReports     = "https://github.com/kesondrakey/fluxtools/issues",
Encoding       = "UTF-8",
LazyData       = "true",
Imports        = "shiny, dplyr, plotly",
Suggests       = "knitr, rmarkdown",
VignetteBuilder = "knitr",
BuildVignettes = "FALSE"
))
# 2) Build a source tarball but keep prebuilt vignettes:
tarball <- devtools::build(vignettes = FALSE)
devtools::check_built(tarball)
# If DESCRIPTION does not yet exist, create one:
use_description(fields = list(
Package     = "fluxtools",
Type        = "Package",
Title       = "Interactive QA/QC for Ameriflux Data",
Version     = "0.2.0",
'Authors@R'   = 'person("Kesondra", "Key", email = "keyke@iu.edu", role = c("aut", "cre"))',
Description    = paste(
"Fluxtools provides a Shiny-based interactive QA/QC tool for",
"eddy-covariance flux-tower data processing.",
"It generates data-point removal code via user-directed selection from a",
"scatterplot, and can export a cleaned CSV with removed points set to NA",
"plus an R script for reproducibility.",
"Reference: Key (2025) <DOI: 10.5281/zenodo.15597159>.",
sep = " "
),
License        = "GPL-3", #Since I use Shiny
URL            = "https://github.com/kesondrakey/fluxtools, https://doi.org/10.5281/zenodo.15597159",
# URL            = c(
#   "https://github.com/kesondrakey/fluxtools",
#   "https://doi.org/10.5281/zenodo.15597159"
# ),
BugReports     = "https://github.com/kesondrakey/fluxtools/issues",
Encoding       = "UTF-8",
LazyData       = "true",
Imports        = "shiny, dplyr, plotly",
Suggests       = "knitr, rmarkdown",
VignetteBuilder = "knitr"#,
#BuildVignettes = "FALSE"
))
# 2) Build a source tarball but keep prebuilt vignettes:
tarball <- devtools::build(vignettes = FALSE)
devtools::check_built(tarball)
# 2) Build a source tarball but keep prebuilt vignettes:
tarball <- devtools::build(vignettes = FALSE)
devtools::check_built(tarball)
rmarkdown::render("vignettes/introduction.Rmd",
output_format = "rmarkdown::html_vignette",
output_file = "C:/Users/keyke/Documents/GitHub/fluxtools/inst/doc/introduction.html",
quiet = TRUE)
rmarkdown::render(
"vignettes/introduction.Rmd",
output_format = "html_vignette",
output_dir    = "inst/doc",
output_file   = "introduction.html",
quiet         = TRUE
)
rmarkdown::render("vignettes/introduction.Rmd",
output_format = "rmarkdown::html_vignette",
output_file = "C:/Users/keyke/Documents/GitHub/fluxtools/inst/doc/introduction.html",
quiet = TRUE)
rmarkdown::render(
"vignettes/introduction.Rmd",
output_format = "html_vignette",
output_dir    = "inst/doc",
output_file   = "introduction.html",
quiet         = TRUE
)
rmarkdown::render(
"vignettes/introduction.Rmd",
output_format = "html_vignette",
output_dir    = "inst/doc",
output_file   = "introduction.html",
quiet         = TRUE
)
rmarkdown::render(
"vignettes/introduction.Rmd",
output_format = "html_vignette",
output_dir    = "inst/doc",
output_file   = "introduction.html",
quiet         = TRUE
)
rmarkdown::render(
"vignettes/introduction.Rmd",
output_format = "html_vignette",
output_dir    = "inst/doc",
output_file   = "introduction.html",
quiet         = TRUE
)
# in R console, from your package root
devtools::build_vignettes()
# 1) In your R session, set wd to the package root:
setwd("C:/Users/keyke/Documents/GitHub/fluxtools")
# 2) Build a source tarball but keep prebuilt vignettes:
tarball <- devtools::build(vignettes = FALSE)
devtools::check_built(tarball)
# If DESCRIPTION does not yet exist, create one:
use_description(fields = list(
Package     = "fluxtools",
Type        = "Package",
Title       = "An Interactive QA/QC for Ameriflux Data",
Version     = "0.2.0",
'Authors@R'   = 'person("Kesondra", "Key", email = "keyke@iu.edu", role = c("aut", "cre"))',
Description    = paste(
"Fluxtools provides a Shiny-based interactive QA/QC tool for",
"eddy-covariance flux-tower data processing.",
"It generates data-point removal code via user-directed selection from a",
"scatterplot, and can export a cleaned CSV with removed points set to NA",
"plus an R script for reproducibility.",
"Reference: Key (2025) <DOI: 10.5281/zenodo.15597159>.",
sep = " "
),
License        = "GPL-3", #Since I use Shiny
URL            = "https://github.com/kesondrakey/fluxtools, https://doi.org/10.5281/zenodo.15597159",
# URL            = c(
#   "https://github.com/kesondrakey/fluxtools",
#   "https://doi.org/10.5281/zenodo.15597159"
# ),
BugReports     = "https://github.com/kesondrakey/fluxtools/issues",
Encoding       = "UTF-8",
LazyData       = "true",
Imports        = "shiny, dplyr, plotly",
Suggests       = "knitr, rmarkdown",
VignetteBuilder = "knitr",
BuildVignettes = "FALSE"
))
# 2) Build a source tarball but keep prebuilt vignettes:
tarball <- devtools::build(vignettes = FALSE)
devtools::check_built(tarball)
# If DESCRIPTION does not yet exist, create one:
use_description(fields = list(
Package     = "fluxtools",
Type        = "Package",
Title       = "Interactive QA/QC for Ameriflux Data",
Version     = "0.2.0",
'Authors@R'   = 'person("Kesondra", "Key", email = "keyke@iu.edu", role = c("aut", "cre"))',
Description    = paste(
"An interactive Shiny-based tool for QA/QC of",
"eddy covariance flux tower data processing.",
"It generates data-point removal code via user-directed selection from a",
"scatterplot, and can export a cleaned CSV with removed points set to NA",
"plus an R script for reproducibility.",
"Reference: Key (2025) <DOI: 10.5281/zenodo.15597159>.",
sep = " "
),
License        = "GPL-3", #Since I use Shiny
URL            = "https://github.com/kesondrakey/fluxtools, https://doi.org/10.5281/zenodo.15597159",
# URL            = c(
#   "https://github.com/kesondrakey/fluxtools",
#   "https://doi.org/10.5281/zenodo.15597159"
# ),
BugReports     = "https://github.com/kesondrakey/fluxtools/issues",
Encoding       = "UTF-8",
LazyData       = "true",
Imports        = "shiny, dplyr, plotly",
Suggests       = "knitr, rmarkdown",
VignetteBuilder = "knitr",
BuildVignettes = "FALSE"
))
# 2) Build a source tarball but keep prebuilt vignettes:
tarball <- devtools::build(vignettes = FALSE)
devtools::check_built(tarball)
# construct the lines of your BibTeX entry
bib_entry <- c(
"@book{Burba2021,",
"  author    = {Burba, Gerd},",
"  title     = {Eddy Covariance Method --- for Scientific, Regulatory, and Commercial Applications},",
"  publisher = {LI-COR Biosciences},",
"  address   = {Lincoln, Nebraska},",
"  year      = {2021},",
"  isbn      = {978-0-578-97714-0},",
"  pages     = {702},",
"  note      = {A comprehensive expansion of the considerations in this document and",
"               detailed description of the full eddy covariance system from theory",
"               to field deployment to post-processing analysis.}",
"}"
)
# write to disk as paper.bib
writeLines(bib_entry, con = "C:/Users/Karmic Dreamwork.000/Desktop/paper/paper.bib")
# Or the development version:
remotes::install_github("kesondrakey/fluxtools")
# Rebuild & install your local package:
devtools::install_local(path = "E:/GitHub/fluxtools", build_vignettes = TRUE, force = TRUE)
remotes::install_github(
"kesondrakey/fluxtools",
build_vignettes = FALSE  # omit or TRUE if you really need the vignette built
)
devtools::install_github(
"kesondrakey/fluxtools",
build_vignettes = FALSE
)
#Rendering .rmd into .md
# from your package root
rmarkdown::render(
input          = "E:/Github/fluxtools/paper.Rmd",
output_format  = rmarkdown::md_document(
variant = "commonmark",
preserve_yaml = TRUE
),
output_file    = "E:/Github/fluxtools/paper.md"
)
#Rendering .rmd into .md
# from your package root
rmarkdown::render(
input          = "E:/Github/fluxtools/paper/paper.Rmd",
output_format  = rmarkdown::md_document(
variant = "commonmark",
preserve_yaml = TRUE
),
output_file    = "E:/Github/fluxtools/paper/paper.md"
)
#Rendering .rmd into .md
# from your package root
rmarkdown::render(
input          = "E:/Github/fluxtools/paper/paper.Rmd",
output_format  = rmarkdown::md_document(
variant = "commonmark",
preserve_yaml = TRUE
),
output_file    = "E:/Github/fluxtools/paper/paper.md"
)
#Rendering .rmd into .md
# from your package root
rmarkdown::render(
input          = "E:/Github/fluxtools/paper/paper.Rmd",
output_format  = rmarkdown::md_document(
variant = "commonmark",
preserve_yaml = TRUE
),
output_file    = "E:/Github/fluxtools/paper/paper.md"
)
library(fluxtools)
fluxtools::run_flux_qaqc(-5)
vignette("introduction", package = "fluxtools")
vignette("introduction", package = "fluxtools")
#Rendering .rmd into .md
# from your package root
rmarkdown::render(
input          = "E:/Github/fluxtools/paper/paper.Rmd",
output_format  = rmarkdown::md_document(
variant = "commonmark",
preserve_yaml = TRUE
),
output_file    = "E:/Github/fluxtools/paper/paper.md"
)
#Rendering .rmd into .md
# from your package root
rmarkdown::render(
input          = "E:/Github/fluxtools/paper/paper.Rmd",
output_format  = rmarkdown::md_document(
variant = "commonmark",
preserve_yaml = TRUE
),
output_file    = "E:/Github/fluxtools/paper/paper.md"
)
rmarkdown::render(
input          = "E:/Github/fluxtools/paper/paper.Rmd",
output_format  = rmarkdown::md_document(
variant = "commonmark",
preserve_yaml = TRUE
),
output_file    = "E:/Github/fluxtools/paper/paper.pdf"
)
rmarkdown::render(
input          = "E:/Github/fluxtools/paper/paper.Rmd",
output_format  = rmarkdown::md_document(
variant = "commonmark",
preserve_yaml = TRUE
),
output_file    = "E:/Github/fluxtools/paper/paper.pdf"
)
rmarkdown::render(
input          = "E:/Github/fluxtools/paper/paper_pdf.Rmd",
output_format  = rmarkdown::md_document(
variant = "commonmark",
preserve_yaml = TRUE
),
output_file    = "E:/Github/fluxtools/paper/paper.pdf"
)
rmarkdown::render(
input = "E:/Github/fluxtools/paper/paper_pdf.Rmd",
output_format = "pdf_document",
output_file = "E:/Github/fluxtools/paper/paper_pdf.pdf"
)
rmarkdown::render(
input = "E:/Github/fluxtools/paper/paper_pdf.Rmd",
output_format = "pdf_document",
output_file = "E:/Github/fluxtools/paper/paper_pdf.pdf", clean = TRUE
)
tinytex::install_tinytex()  # if TinyTeX isn't installed already
y
tinytex::install_tinytex()  # if TinyTeX isn't installed already
tinytex::install_tinytex()  # if TinyTeX isn't installed already
y
tinytex::install_tinytex()  # if TinyTeX isn't installed already
Y
tinytex::install_tinytex()  # if TinyTeX isn't installed already
rmarkdown::render(
input = "E:/Github/fluxtools/paper/paper_pdf.Rmd",
output_format = "pdf_document",
output_file = "E:/Github/fluxtools/paper/paper_pdf.pdf", clean = TRUE
)
#Rendering .rmd into .md
# from your package root
rmarkdown::render(
input          = "E:/Github/fluxtools/paper/paper.Rmd",
output_format  = rmarkdown::md_document(
variant = "commonmark",
preserve_yaml = TRUE
),
output_file    = "E:/Github/fluxtools/paper/paper.md"
)
citation("dplyr")
citation("plotly")
citation("shiny")
r packageVersion("plotly")
utils::packageVersion("plotly")
utils::packageVersion("shiny")
utils::packageVersion("dplyr")
citation("plotly")
citation()
utils::packageVersion()
citation("fluxtools")
devtools::install_github("meenakshi-kushwaha/mmaqshiny")
library(mmaqshiny)
#Install from CRAN
install.packages("fluxtools")
install.packages("fluxtools")
citation("REddyproc")
citation("Reddyproc")
library("REddyProc")
citation("REddyProc")
#install.packages(c("usethis", "devtools", "roxygen2"))
library(usethis)
# If DESCRIPTION does not yet exist, create one:
use_description(fields = list(
Package     = "fluxtools",
Type        = "Package",
Title       = "Interactive QA/QC for Eddy Covariance Data",
Version     = "0.3.0",
'Authors@R'   = 'person("Kesondra", "Key", email = "keyke@iu.edu", role = c("aut", "cre"))',
Description    = paste(
"An interactive Shiny-based tool for QA/QC of",
"eddy covariance flux tower data processing.",
"It generates data-point removal code via user-directed selection from a",
"scatterplot, and can export a cleaned CSV with removed points set to NA",
"plus an R script for reproducibility.",
"Reference: Key (2025) <DOI: 10.5281/zenodo.15597159>.",
sep = " "
),
License        = "GPL-3", #Since I use Shiny
URL            = "https://github.com/kesondrakey/fluxtools, https://doi.org/10.5281/zenodo.15597159",
# URL            = c(
#   "https://github.com/kesondrakey/fluxtools",
#   "https://doi.org/10.5281/zenodo.15597159"
# ),
BugReports     = "https://github.com/kesondrakey/fluxtools/issues",
Encoding       = "UTF-8",
LazyData       = "true",
Imports        = "shiny, dplyr, plotly",
Suggests       = "knitr, rmarkdown",
VignetteBuilder = "knitr",
BuildVignettes = "TRUE"
))
# If DESCRIPTION does not yet exist, create one:
use_description(fields = list(
Package     = "fluxtools",
Type        = "Package",
Title       = "Interactive QA/QC for Eddy Covariance Data",
Version     = "0.3.0",
'Authors@R'   = 'person("Kesondra", "Key", email = "keyke@iu.edu", role = c("aut", "cre"))',
Description    = paste(
"An interactive Shiny-based tool for QA/QC of",
"eddy covariance flux tower data processing.",
"It generates data-point removal code via user-directed selection from a",
"scatterplot, and can export a cleaned .csv with removed points set to NA",
"plus an R script for reproducibility.",
"Reference: Key (2025) <DOI: 10.5281/zenodo.15597159>.",
sep = " "
),
License        = "GPL-3", #Since I use Shiny
URL            = "https://github.com/kesondrakey/fluxtools, https://doi.org/10.5281/zenodo.15597159",
# URL            = c(
#   "https://github.com/kesondrakey/fluxtools",
#   "https://doi.org/10.5281/zenodo.15597159"
# ),
BugReports     = "https://github.com/kesondrakey/fluxtools/issues",
Encoding       = "UTF-8",
LazyData       = "true",
Imports        = "shiny, dplyr, plotly",
Suggests       = "knitr, rmarkdown",
VignetteBuilder = "knitr",
BuildVignettes = "TRUE"
))
# 1) In your R session, set wd to the package root:
#setwd("C:/Users/keyke/Documents/GitHub/fluxtools")
# 2) Build a source tarball but keep prebuilt vignettes:
tarball <- devtools::build(vignettes = TRUE)
devtools::check_built(tarball)
# 1) In your R session, set wd to the package root:
#setwd("C:/Users/keyke/Documents/GitHub/fluxtools")
# 2) Build a source tarball but keep prebuilt vignettes:
tarball <- devtools::build(vignettes = TRUE)
# 1) In your R session, set wd to the package root:
#setwd("C:/Users/keyke/Documents/GitHub/fluxtools")
# 2) Build a source tarball but keep prebuilt vignettes:
tarball <- devtools::build(vignettes = TRUE)
devtools::check_built(tarball)
rmarkdown::render("E:/Github/fluxtools/paper/paper.Rmd", encoding = "UTF-8", quiet = TRUE)
rmarkdown::render("E:/Github/fluxtools/paper/paper.Rmd", encoding = "UTF-8", quiet = TRUE)
rmarkdown::render("E:/Github/fluxtools/paper/paper.Rmd", encoding = "UTF-8", quiet = TRUE)
rmarkdown::render("E:/Github/fluxtools/paper/paper.Rmd", encoding = "UTF-8", quiet = TRUE)
rmarkdown::render("E:/Github/fluxtools/paper/paper.Rmd", encoding = "UTF-8", quiet = TRUE)
rmarkdown::render("E:/Github/fluxtools/paper/paper.Rmd", encoding = "UTF-8", quiet = TRUE)
rmarkdown::render("E:/Github/fluxtools/paper/paper.Rmd", encoding = "UTF-8", quiet = TRUE)
rmarkdown::render("E:/Github/fluxtools/paper/paper.Rmd", encoding = "UTF-8", quiet = TRUE)
rmarkdown::render("E:/Github/fluxtools/paper/paper.Rmd", encoding = "UTF-8", quiet = TRUE)
rmarkdown::render("E:/Github/fluxtools/paper/paper.Rmd", encoding = "UTF-8", quiet = TRUE)
rmarkdown::render("E:/Github/fluxtools/paper/paper.Rmd", encoding = "UTF-8", quiet = TRUE)
rmarkdown::render("E:/Github/fluxtools/paper/paper.Rmd", encoding = "UTF-8", quiet = TRUE)
devtools::install_github("kesondrakey/fluxtools")
#or
# Direct clone + build:
remotes::install_git("https://github.com/kesondrakey/fluxtools.git")
library(fluxtools)
vignette('introduction', package = 'fluxtools')
# Option 3.) Direct clone + build:
library(remotes)
rmarkdown::render("E:/Github/fluxtools/paper/paper.Rmd", encoding = "UTF-8", quiet = TRUE)
library(fluxtools)
citation('fluxtools')
rmarkdown::render("E:/Github/fluxtools/paper/paper.Rmd", encoding = "UTF-8", quiet = TRUE)
rmarkdown::render("E:/Github/fluxtools/paper/paper.Rmd", encoding = "UTF-8", quiet = TRUE)
rmarkdown::render("E:/Github/fluxtools/paper/paper.Rmd", encoding = "UTF-8", quiet = TRUE)
