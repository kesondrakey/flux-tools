# (a) Build the tar.gz:
pkgbuild::check_build_tools(debug = TRUE)
# (a) Build the tar.gz:
pkgbuild::check_build_tools(debug = TRUE)
# (a) Build the tar.gz:
pkgbuild::check_build_tools(debug = TRUE)
library(rtools)
library(Rtools)
Sys.which("make")
Sys.which("make")
usethis::edit_r_environ()
pkgbuild::check_build_tools(debug = TRUE)
Sys.which("make")
install.packages(c("shiny", "plotly", "dplyr"))
# then clone the repository:
git clone https://github.com/yourusername/fluxtools.git
# then clone the repository:
git clone 'https://github.com/yourusername/fluxtools.git'
# then clone the repository:
git clone 'https://github.com/kesondrakey/fluxtools.git'
# then clone the repository:
git clone https://github.com/kesondrakey/fluxtools.git
# then clone the repository:
git - clone https://github.com/kesondrakey/fluxtools.git
setwd("fluxtools")
shiny::runApp("app.R")
# 1a) Core Shiny‐app packages
install_if_needed("shiny")
install_if_needed("plotly")
install_if_needed("dplyr")
# =====================================================================
# 1) ENSURE ALL REQUIRED DEPENDENCIES ARE UP TO DATE
# =====================================================================
install_if_needed <- function(pkg, min_version = NULL) {
if (!requireNamespace(pkg, quietly = TRUE)) {
message("→ Installing ‘", pkg, "’ …")
install.packages(pkg, dependencies = TRUE)
} else if (!is.null(min_version) &&
utils::packageVersion(pkg) < as.package_version(min_version)) {
message("→ Updating ‘", pkg,
"’ (found version ", utils::packageVersion(pkg),
", but need ≥ ", min_version, ") …")
install.packages(pkg, dependencies = TRUE)
} else {
message("✔ ‘", pkg, "’ ok (version ", utils::packageVersion(pkg), ")")
}
}
# 1a) Core Shiny‐app packages
install_if_needed("shiny")
install_if_needed("plotly")
install_if_needed("dplyr")
# 1b) We need ‘devtools’ (or you could use ‘remotes’) to install from local source
install_if_needed("devtools")
message("\n→ Downloading fluxtools ZIP from GitHub…")
tmp_zip <- tempfile(fileext = ".zip")
download.file(
url      = "https://github.com/kesondrakey/fluxtools/archive/refs/heads/main.zip",
destfile = tmp_zip,
mode     = "wb"
)
message("→ Unzipping into a temp directory…")
unzipped_dir <- tempfile("fluxtools_src_")
utils::unzip(tmp_zip, exdir = unzipped_dir)
# After unzip, the folder is something like:
#     tempdir()/fluxtools-main
src_folder <- file.path(unzipped_dir, "fluxtools-main")
if (!dir.exists(src_folder)) {
stop("Could not find ’fluxtools-main’ after unzipping; check unzip path.")
}
message("\n→ Installing ‘fluxtools’ from the unzipped folder…")
devtools::install_local(src_folder, dependencies = TRUE, force = TRUE)
message("\n✔ Done installing ‘fluxtools’ and its dependencies.")
if (requireNamespace("fluxtools", quietly = TRUE)) {
library(fluxtools)
message("\nLaunching the Shiny QA/QC app with offset = –5 (UTC–5)…\n")
run_flux_qaqc(-5) #UTC offset here!
} else {
stop("ERROR: ‘fluxtools’ did not install correctly. ",
"Please look at any errors above.")
}
message("\n→ Installing ‘fluxtools’ from the unzipped folder…")
if (requireNamespace("fluxtools", quietly = TRUE)) {
library(fluxtools)
message("\nLaunching the Shiny QA/QC app with offset = –5 (UTC–5)…\n")
run_flux_qaqc(-5) #UTC offset here!
} else {
stop("ERROR: ‘fluxtools’ did not install correctly. ",
"Please look at any errors above.")
}
message("\n✔ Done installing ‘fluxtools’ and its dependencies.")
if (requireNamespace("fluxtools", quietly = TRUE)) {
library(fluxtools)
message("\nLaunching the Shiny QA/QC app with offset = –5 (UTC–5)…\n")
run_flux_qaqc(-5) #UTC offset here!
} else {
stop("ERROR: ‘fluxtools’ did not install correctly. ",
"Please look at any errors above.")
}
runApp('R/run_apptest.R')
runApp('R/run_apptest.R')
runApp('R/run_apptest.R')
library(shiny); runApp('inst/app/appv3.R')
install.packages("shinyBS")
runApp('inst/app/appv3.R')
runApp('inst/app/appv3.R')
runApp('inst/app/appv3.R')
runApp('inst/app/appv3.R')
runApp('inst/app/appv3.R')
runApp('inst/app/appv3.R')
runApp('inst/app/appv3.R')
runApp('inst/app/appv3.R')
runApp('inst/app/appv3.R')
runApp('inst/app/appv3.R')
runApp('inst/app/appv3.R')
runApp('inst/app/appv3.R')
runApp('inst/app/appv3.R')
runApp('inst/app/appv3.R')
runApp('inst/app/appv3.R')
runApp('inst/app/appv3.R')
runApp('inst/app/appv3.R')
runApp('inst/app/appv3.R')
runApp('inst/app/appv3.R')
runApp('inst/app/appv3.R')
runApp('inst/app/appv3.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv2.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv2.R')
runApp('inst/app/appv2.R')
runApp('inst/app/appv2.R')
runApp('inst/app/appv2.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv2.R')
runApp('inst/app/appv2.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
library(shiny)
library(plotly)
library(dplyr)
library(shinyBS)   # for bsTooltip()
library(bslib)     # for theming
# Allow larger uploads (here: up to 100 MB)
options(shiny.maxRequestSize = 100 * 1024^2)
## ── 1) Theme ───────────────────────────────────────────────────────
light_theme <- bs_theme(
version = 5,
bootswatch = "yeti")
dark_theme  <- bs_theme(
version   = 5,
bootswatch= "darkly",
fg        = "#EEE",
bg        = "#222",
input_bg  = "#333",
input_fg  = "#EEE"
)
ui <- fluidPage(
theme = light_theme,   # ← important!
# client‐side handler for copying text
tags$head(
tags$style(HTML("
.copy-button-col {
display: flex !important;
justify-content: flex-end !important;
align-items: center !important;
padding-left: 0 !important;
padding-right: 1rem !important;
}
body.dark-mode { font-size: .875rem !important; color: #EEE !important; }
/* … your other dark-mode CSS … */
")),
tags$script(HTML("
function copyVisibleCode(){
var which = document.querySelector('input[name=code_choice]:checked').value;
var srcId = which==='current' ? 'code_current' : 'code_all';
var txt   = document.getElementById(srcId).innerText;
var ta    = document.createElement('textarea');
ta.value  = txt; ta.readOnly = true;
ta.style.position = 'absolute'; ta.style.left = '-9999px';
document.body.appendChild(ta);
ta.select(); document.execCommand('copy');
document.body.removeChild(ta);
Shiny.setInputValue('did_copy_code', Math.random());
}
document.addEventListener('shiny:connected', function(){
var btn = document.getElementById('copy_code_btn');
if(btn) btn.onclick = copyVisibleCode;
});
"))
),
## ── 2) Title + help link ───────────────────────────────────────────
titlePanel(
div(
"fluxtools: Interactive QA/QC with Code Generator",
actionLink("help", label = icon("question-circle"), style = "margin-left:10px;")
)
),
## ── 3) Subtitle ─────────────────────────────────────────────────────
uiOutput("subtitle"),
## ── 4) Main layout ─────────────────────────────────────────────────
sidebarLayout(
### Sidebar with all your controls
sidebarPanel(
width = 4,
# Upload
fileInput("csv_file", "Upload Ameriflux‐style .csv:", accept = ".csv"),
# Year filter
tagAppendAttributes(
selectizeInput("year_sel", "Select Year(s):", choices  = NULL, multiple = TRUE,
options  = list(placeholder = "– upload to load year(s) –",
plugins     = list("remove_button")),
width = "100%"),
'data-bs-toggle' = "tooltip",
title            = "Filter to one or more years"
),
hr(),
# Variable selectors
tagAppendAttributes(
selectInput("yvar", "Y-axis:", choices = NULL, width = "100%"),
'data-bs-toggle' = "tooltip",
title            = "Select your Y-axis variable — the column whose values will be set to NA"
),
tagAppendAttributes(
selectInput("xvar", "X-axis:", choices = NULL, width = "100%"),
'data-bs-toggle' = "tooltip",
title            = "Select your X-axis"
),
hr(),
#correct ()
# Manual selection row
fluidRow(
column(6,actionButton("add_sel", "Select Data",
width="100%",
icon = icon("check"),
'data-bs-toggle'="tooltip",
title="Add the selected points to the cccumulated removal code")
),
column(6,
actionButton("clear_sel","Clear Selection",
width = "100%",
icon = icon("check"),
'data-bs-toggle'="tooltip",
title="Clear the current selection from the accumulated removal code")
)
),
# Accumulated‐selection row
fluidRow(
column(6,
actionButton("remove_acc","Remove from Accumulated",
width = "100%",
icon = icon("check"),
'data-bs-toggle'="tooltip",
title="Remove current selection from the accumulated removal code")
),
column(6,
actionButton("remove","Apply removals",
width = "100%",
icon = icon("ban"),
'data-bs-toggle'="tooltip",
title="Turn the current Y‐values into NA's and remove from view")
)
),
tags$br(),
hr(),
# Outlier controls
sliderInput("sd_thresh", "Highlight points beyond (σ):", min = 0, max = 3, value = 0, step = 1),
checkboxInput("show_reg", "Show regression line & R²", value = TRUE),
fluidRow(
column(6, actionButton("add_outliers", "Mark all ±σ outliers", width = "100%")),
column(6, actionButton("clear_outliers", "Clear ±σ outliers", width = "100%"))),
hr(),
fluidRow(style = "display:flex; align-items:center; margin-bottom:0.5rem;",
column(width = 8, style = "padding-right:0;",
radioButtons("code_choice", NULL,
choiceNames  = list(
tagList(icon("code"), HTML("&nbsp;Current")),
tagList(icon("list-ul"), HTML("&nbsp;Accumulated"))),
choiceValues = c("current","all"),
inline       = TRUE)),
column(width = 4, class = "copy-button-col",tags$button(
id    = "copy_code_btn",type  = "button",class = "btn btn-secondary",'data-bs-toggle' = "tooltip",
title = "Copy visible code",
onclick = HTML("
// pick current or accumulated
var which = document.querySelector('input[name=code_choice]:checked').value;
var srcId = which==='current' ? 'code_current' : 'code_all';
var txt   = document.getElementById(srcId).innerText;
// old‐school textarea hack
var ta = document.createElement('textarea');
ta.value = txt;
ta.setAttribute('readonly','');
ta.style.position = 'absolute';
ta.style.left = '-9999px';
document.body.appendChild(ta);
ta.select();
document.execCommand('copy');
document.body.removeChild(ta);
// fire an input event so Shiny can show its own toast
Shiny.setInputValue('did_copy_code', Math.random());
"),
icon("clipboard"))
)
)
),
# the actual code box (must have IDs matching the above JS)
uiOutput("code_ui"),
# only show this when 'Accumulated' is selected
conditionalPanel(
"input.code_choice == 'all'",
actionButton(
"reset_accum", "Clear accumulated",
width = "100%",
'data-bs-toggle'="tooltip",
title = "Remove all points from accumulated list")
),
hr(),
# Download & reset
# in your sidebarPanel, toward the bottom
fluidRow(
column(4, downloadButton("download_data", "Export cleaned data", width="100%")),
column(4, actionButton   ("reset_data",     "Reload original data", width="100%")),
column(4, div(style="margin-top:0.5em;",checkboxInput("dark_mode","Dark mode",FALSE))
)
),
mainPanel(
width = 8,
plotlyOutput("qc_plot", height = "80vh")
)
)  # ← close sidebarLayout()
)  # ← close fluidPage()
shinyApp(ui, server)
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv2.R')
runApp('inst/app/appv2.R')
runApp('inst/app/appv2.R')
runApp('inst/app/appv2.R')
runApp('inst/app/appv2.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv4.R')
runApp('inst/app/appv2.R')
runApp('inst/app/appv2.R')
runApp('inst/app/appv2.R')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app/appv2.R')
runApp('inst/app')
runApp('inst/app/appv4.R')
runApp('inst/app/appv2.R')
runApp('inst/app')
shiny::runApp('inst/app')
shiny::runApp('inst/app')
#install.packages(c("usethis", "devtools", "roxygen2"))
library(usethis)
devtools::document()
#manual - automatic isnt working
if (!dir.exists("inst/doc")) dir.create("inst/doc", recursive = TRUE)
rmarkdown::render("vignettes/introduction.Rmd",
output_format = "rmarkdown::html_vignette",
output_file = "E:/Github/fluxtools/inst/doc/introduction.html",
quiet = TRUE)
# 1) In your R session, set wd to the package root:
setwd("E:/Github/fluxtools")
# 2) Build a source tarball but keep prebuilt vignettes:
tarball <- devtools::build(vignettes = FALSE)
devtools::check_built(tarball)
shiny::runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
# Expose inst/doc as /docs inside the Shiny app:
addResourcePath("docs", system.file("doc", package = "fluxtools"))
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
shiny::runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
# Expose inst/doc as /docs inside the Shiny app:
# install (or reinstall) so inst/doc → library/fluxtools/doc
devtools::install()
# Expose inst/doc as /docs inside the Shiny app:
# install (or reinstall) so inst/doc → library/fluxtools/doc
#devtools::install()
# then launch the app from the installed package
library(fluxtools)
shiny::runApp(system.file("app", package = "fluxtools"))
browseVignettes("fluxtools")
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
library(fluxtools):
vignette("introduction", package = "fluxtools")
library(fluxtools):
vignette("introduction", package = "fluxtools")
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
shiny::runApp('inst/app')
library(usethis)
usethis::use_directory("inst/app")
usethis::use_gpl3_license(name = "Kesondra Key")
